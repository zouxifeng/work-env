"判断系统是否具有“自动命令”（autocmd）的支持
if has('autocmd')
"清除所有的自动命令，以方便调试
au!
"对于后缀为“.asm”的文件，认为其是微软的 Macro Assembler 格式
"autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
endif

" 载入文件类型插件
filetype plugin on 
" 为特定文件类型载入相关缩进文件
filetype indent on 

"语法样式开启
syntax on

set nu
set autoread
set noerrorbells
set backspace=2
set ruler
set laststatus=2
set fo=cqrt

"设置缩进
set sw=4
set ts=4
set softtabstop=4
set expandtab
set smartindent
set autoindent

set whichwrap+=<,>,h,l,[,]
set textwidth=80
set et

set colorcolumn=81

" history文件中需要记录的行数
set history=100 
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,- 
"自动折行
set wrap
"缺省不产生备份文件
set nobackup
" 不要生成swap文件
set noswapfile
"set bufhidden=hide
"在输入括号时光标会短暂地跳到与之相匹配的括号处，不影响输入
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 搜索时不区分大小写
" set ignorecase
" 在搜索时，输入的词句的逐
set incsearch
" 搜索高亮
set hlsearch
" 不要闪烁
set novisualbell 
"正确地处理中文字符的折行和拼接
set formatoptions+=mM
"文件 UTF-8 编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,latin1
"开启命令显示
set showcmd
set shortmess=atI
" Scroll at last 7 rows.
set so=7

"不需要保持和 vi 非常兼容
set nocompatible
" 使backspace正常处理indent, eol, start等
set backspace=indent,eol,start whichwrap+=<,>,[,]
"在输入命令时列出匹配项目，也就是截图底部的效果
set wildmenu
"默认情况下手动折叠
set foldmethod=manual
"set bufhidden=hide

" Ended up copying the line numbers
" set mouse=a

" 导出 html 设置
let html_use_css = 1
let html_number_lines = 0
let use_xhtml = 1

"当使用了图形界面，并且环境变量 LANG 中不含“.”（即没有规定编码）时，把 Vim 的内部编码设为 UTF-8
set encoding=utf-8
set fileencoding=utf-8

" 高亮显示普通txt文件（需要txt.vim脚本）
au BufRead,BufNewFile *  setfiletype txt 
au BufRead,BufNewFile *.tex syntax spell toplevel

:command -range=% Uniq <line1>,<line2>g/^\%<<line2>l\(.*\)\n\1$/d

autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

" Quick saving
" imap <F5> <ESC>:w<CR>i
" imap <F6> <ESC>:w<CR>
" map <F6> <ESC>:w<CR>

set cscopequickfix=s-,c-,d-,i-,t-,e-

"设置工作目录
" function! CHANGE_CURR_DIR()
"   let _dir = expand("%:p:h")
"   exec "cd " . _dir
"   unlet _dir
" endfunction
" autocmd BufEnter * call CHANGE_CURR_DIR()

" NERDTree插件的快捷键
" imap <silent> <F7> <esc>:NERDTreeToggle<CR>
" nmap <silent> <F7> :NERDTreeToggle<CR>
" BufExplorer 快捷键 {{{
" imap <silent> <F8> <esc>:BuffergatorToggle<CR>
" nmap <silent> <F8> :BuffergatorToggle<CR>
" }}}
" TagList Key Binding
" imap <silent> <F9> <esc>:TlistToggle<CR>i
" nmap <silent> <F9> :TlistToggle<CR>

"CTRL-[ and CTRL-] indent and unindent blocks {{{
"  inoremap <C-[> <C-O><LT><LT>
"  inoremap <C-]> <C-O><GT><GT>
"  nnoremap <C-[> <LT><LT>
"  nnoremap <C-]> <GT><GT>
"  vnoremap <C-[> <LT>
"  vnoremap <C-]> <GT>
"}}}

" NERD Commenter {{{
let NERDSpaceDelims = 1
map <M-/> <Plug>NERDCommenterToggle
imap <M-/> <C-O><Plug>NERDCommenterToggle
" }}}

" 窗口区域切换,F5 后 ↑↓←→  来切换
" imap <silent> <C-left> <esc><C-W><left>
" vmap <silent> <C-left> <esc><C-W><left>
" nmap <silent> <C-left> <C-W><left>
" imap <silent> <C-right> <esc><C-W><right>
" vmap <silent> <C-right> <esc><C-W><right>
" nmap <silent> <C-right> <C-W><right>
" imap <silent> <C-up> <esc><C-W><up>
" vmap <silent> <C-up> <esc><C-W><up>
" nmap <silent> <C-up> <C-W><up>
" imap <silent> <C-down> <esc><C-W><down>
" vmap <silent> <C-down> <esc><C-W><down>
" nmap <silent> <C-down> <C-W><down>

" ctrl + c,a,v,x,z
nnoremap <BS> d
" ctrl + a
" noremap <C-A> ggVG
" inoremap <C-A> <C-O>ggVG
" ctrl + s
" It seems ctrl
" imap <C-s> <esc>:w<CR>:echo expand("%f") . " saved."<CR>
" vmap <C-s> <esc>:w<CR>:echo expand("%f") . " saved."<CR>
" nmap <C-s> :w<CR>:echo expand("%f") . " saved."<CR>

" ctrl + n
" imap <C-n> <esc>:enew!<CR>
" nmap <C-n> :enew!<CR>
" vmap <C-n> <esc>:enew!<CR>
" ctrl + c
" vmap <C-c> "+y
" ctrl + x
" vmap <C-x> "+x
" ctrl + z
" inoremap <C-z> <C-O>u
" nnoremap <C-z> u
" ctrl + y
" inoremap <C-y> <C-O><C-R>
" nnoremap <C-y> <C-R>
" ctrl + v
" nnoremap <C-v> "+gP
" inoremap <C-v> <C-O>"+gP
" ctrl + f
" imap <C-f> <esc>:/
" nmap <C-f> :/
" ctrl + r
" imap <C-r> <esc>:%s/
" vmap <C-r> <esc>:%s/
" nmap <C-r> :%s/
" ctrl + o
" imap <C-o> <C-O>:e
" vmap <C-o> <esc>:e
" nmap <C-o> :e 

" gz in command mode closes the current buffer
map gz :bdelete<cr>

" g[bB] in command mode switch to the next/prev. buffer
map gb :bnext<cr>
map gB :bprev<cr>
"}}}

" TagList
" let Tlist_Auto_Open=1
" let Tlist_Ctags_Cmd='ctags'
" let Tlist_Use_Right_Window=1
" let Tlist_File_Fold_Auto_Close=1
" let Tlist_Show_One_File=1
" let Tlist_Exit_OnlyWindow=1


" 自动完成设置 禁止在插入模式移动的时候出现 Complete 提示
"let g:acp_mappingDriven = 1

"设置文件格式为unix
set fileformats=unix

if has('gui_running')
  "设置字体大小, not used with Term
  set guifont=Monaco\ 12
  colorscheme wombat
  "colorscheme gemcolors

  "隐藏底部滚动条
  set guioptions-=b
  "隐藏右边滚动条
  set guioptions-=R
  set guioptions-=r
  "隐藏左边滚动条
  set guioptions-=l
  set guioptions-=L
  "隐藏菜单栏
  set guioptions-=m
  "隐藏工具栏
  set guioptions-=T

  "设置F2呼出菜单栏
  function! ToggleMenuBar()
    echo "ToggleMenuBar"
    if &guioptions =~# 'm'
      set guioptions-=m
    else
      set guioptions+=m
    endif
  endfunction
  imap <silent> <C-F12> <C-O>:call ToggleMenuBar()<CR>
  map <silent> <C-F12> :call ToggleMenuBar()<CR>

else
  " Tell vim terminal can support more then 256 colors
  set t_Co=256
endif
