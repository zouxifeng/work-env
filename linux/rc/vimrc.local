" My custom settings.

" gz in command mode closes the current buffer
map gz :bdelete<cr>

let g:ConqueTerm_TERM = 'xterm-256'
nmap ,sh :ConqueTerm 

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set ignorecase                                               " case-insensitive search
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set ruler                                                    " show where you are
set backspace=indent,eol,start

" colorcolumn introduced with 7.3+
if exists('+colorcolumn')
    set colorcolumn=81
endif

" Display content exceeds 80 as error red."
highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
match OverLength /\%>81v.\+/

set showcmd
set smartcase                                                " case-sensitive search if any caps
" set cursorline                                               " show the line where cursor is

" Key mappings
let mapleader=','
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>tr :NERDTreeToggle<CR>
nmap <leader>t :CtrlP<CR>
nmap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nmap <leader>] :TagbarToggle<CR>
" square whitespace plugin not installed. Disabled
" nmap <leader><space> :call whitespace#strip_trailing()<CR>
nmap <leader>gt :GitGutterToggle<CR>
" nmap <leader>c <Plug>Kwbd
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
inoremap jj <ESC>

" ,s will save current buffer.
map <leader>sv :w<cr>

" Copied from google yapf
map <C-P> :call yapf#YAPF()<cr>
imap <C-P> <c-o>:call yapf#YAPF()<cr>

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 1

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown

autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2

" For django
" autocmd FileType python set ft=python.django " For SnipMate
" autocmd FileType html set ft=htmldjango.html " For SnipMate

" For actionscript
au BufNewFile,BufRead *.as set filetype=actionscript
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Gradle build script
autocmd BufRead,BufNewFile *.gradle set filetype=groovy

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'

" Disable java syntax checking, since it will start a java vm and freeze my
" mac
let g:syntastic_mode_map = { 'mode': 'active',
                               \ 'active_filetypes': [],
                               \ 'passive_filetypes': ['java'] }


let g:airline_powerline_fonts = 1
let g:airline_theme = 'bubblegum'
let g:airline#extensions#whitespace#enabled = 1

" to use fancy symbols for airline, uncomment the following lines and use a
" patched font (more info on the README.rst)
if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

let g:ragtag_global_maps = 1

let g:pymode_rope_lookup_project = 0

nmap <Leader>t= :Tabularize /=<CR>
vmap <Leader>t= :Tabularize /=<CR>
nmap <Leader>t: :Tabularize /:\zs<CR>
vmap <Leader>t: :Tabularize /:\zs<CR>

" Jedi configurations
let g:jedi#auto_initialization = 1
let g:jedi#popup_select_first = 0

" AutoClose plugin which will fix set capital chars to vim when arrow keys
" pressed
" let g:AutoClosePreservDotReg = 0

" Enable relativenumber
" set relativenumber
" function! NumberToggle()
"     if(&relativenumber == 1)
"         set number
"     else
"         set relativenumber
"     endif
" endfunc

" nnoremap <C-n> :call NumberToggle()<cr>

" au FocusLost * :set number
" au FocusGained * :set relativenumber

